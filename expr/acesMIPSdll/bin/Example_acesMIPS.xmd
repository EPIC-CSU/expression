;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;; Machine description generated by V-SAT GUI ;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  v 0.99 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; This file contains a specification of the a VLIW Processor based
;;;;;;;;;;;;;;;;;; on the MIPS architecture' ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This machine description is copyrighted by the Regents of the 
;; University of California, Irvine. The following terms apply to
;; all files associated with the description unless explicitly 
;; disclaimed in individual files.  
;; The authors hereby grant permission to use this description and 
;; its documentation for educational and non-commercial purpose. 
;; No written agreement, license, or royalty fee is required for  
;; authorized use of this software. 
;;   
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;; 
;; IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE 
;; LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, 
;; INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT 
;; OF THE USE OF THIS DESCRIPTION, ITS DOCUMENTATION, 
;; OR ANY DERIVATIVES THEREOF, EVEN IF THE AUTHORS HAVE 
;; BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
;; THE AUTHORS AND DISTRIBUTORS SPECIFICALLY 
;; DISCLAIM ANY WARRANTIES, INCLUDING, BUT NOT 
;; LIMITED TO, THE IMPLIED WARRANTIES OF 
;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, 
;; AND NON-INFRINGEMENT. THIS DESCRIPTION IS PROVIDED 
;; ON AN "AS IS" BASIS, AND THE AUTHORS AND 
;; DISTRIBUTORS HAVE NO OBLIGATION TO PROVIDE 
;; MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR 
;; MODIFICATIONS.  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;; 
;; Architectures and Compilers for Embedded Systems (ACES) Laboratory,  
;; Center for Embedded Computer Systems (CECS), 
;; University of California, Irvine, 
;; United States of America. 
;; 
;; 
;; Developed by: 
;;		Dr. Nikil Dutt, Professor, UCI			(dutt@ics.uci.edu) 
;;		Dr. Alex Nicolau, Professor, UCI		(nicolau@ics.uci.edu) 
;;		Peter Grun, Graduate Researcher, UCI	(pgrun@ics.uci.edu) 
;;		Ashok Halambi, Graduate Researcher, UCI	(ahalambi@ics.uci.edu) 
;;		Nick Savoiu, Graduate Researcher, UCI	(savoiu@ics.uci.edu) 
;;		Aviral Shrivastava, Graduate Researcher, UCI (aviral@ics.uci.edu) 
;;		Partha Biswas, Graduate Researcher, UCI (partha@ics.uci.edu) 
;;		Prabhat Mishra, Graduate Researcher, UCI (pmishra@ics.uci.edu) 
;;		Sudeep Pasricha, Graduate Researcher, UCI (sudeep@ics.uci.edu) 
;; 
;; ACES Webpage: http://www.ics.uci.edu/~aces 
;; Email: aces@ics.uci.edu 
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;///////////////////////////////Section 1: Specific operations //////////////////////////////////////////

(OPERATIONS_SECTION
 (VAR_GROUPS
  (any_pc	(DATATYPE  INT)	(REGS PC))
  (double1_retval	(DATATYPE  DOUBLE)	(REGS FPRFile[0]))
  (int_fp	(DATATYPE  INT)	(REGS GPRFile[30]))
  (any_retaddr	(DATATYPE  INT)	(REGS GPRFile[31]))
  (double_any	(DATATYPE  DOUBLE)	(REGS FPRFile[0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30]))
  (float_normal	(DATATYPE  FLOAT)	(REGS FPRFile))
  (int_normal	(DATATYPE  INT)	(REGS GPRFile[1-28]))
  (double1_normal	(DATATYPE  DOUBLE)	(REGS FPRFile[0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30]))
  (float_all	(DATATYPE  FLOAT)	(REGS FPRFile IMM))
  (int_call_param	(DATATYPE  INT)	(REGS GPRFile[4-12]))
  (double_all	(DATATYPE  DOUBLE)	(REGS FPRFile IMM))
  (double_immediate	(DATATYPE  DOUBLE)	(REGS IMM))
  (double2_normal	(DATATYPE  DOUBLE)	(REGS FPRFile[1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31]))
  (float_any	(DATATYPE  FLOAT)	(REGS FPRFile))
  (float_retval	(DATATYPE  FLOAT)	(REGS FPRFile[0]))
  (int_retval	(DATATYPE  INT)	(REGS GPRFile[4]))
  (int_sp	(DATATYPE  INT)	(REGS GPRFile[29]))
  (any_fp	(DATATYPE  INT)	(REGS FP))
  (any_hilo	(DATATYPE  INT)	(REGS HILO))
  (int_hilo	(DATATYPE  INT)	(REGS GPRFile[1-28]))
  (any_cc	(DATATYPE  INT)	(REGS CC))
  (int_all	(DATATYPE  INT)	(REGS GPRFile IMM))
  (int_pc	(DATATYPE  INT)	(REGS PC))
  (float_immediate	(DATATYPE  FLOAT)	(REGS IMM))
  (int_immediate	(DATATYPE  INT)	(REGS IMM))
  (any_sp	(DATATYPE  INT)	(REGS SP))
  (int_retaddr	(DATATYPE  INT)	(REGS GPRFile[31]))
  (int_cc	(DATATYPE  INT)	(REGS GPRFile[1-28]))
  (int_mem	(DATATYPE  INT)	(REGS L1))
  (any_call_param	(DATATYPE  INT)	(REGS GPRFile[4-12]))
  (double2_retval	(DATATYPE  DOUBLE)	(REGS FPRFile[1]))
  (int_any	(DATATYPE  INT)	(REGS GPRFile[1-28]))
  (int_zero	(DATATYPE  INT)	(REGS GPRFile[0]))
 )

 (OP_GROUP _all_ops_
  (OPCODE dmfc1
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ double1_normal) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_")
   (ASMFORMAT ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$f<src1>\n" ) )

  )
   (IRDUMPFORMAT ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($f<src1>)\n" ) )

  )
  )

  (OPCODE dmtc1
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_DEST_ double1_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_")
   (ASMFORMAT ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$<src1>\n" ) )

  )
   (IRDUMPFORMAT ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($<src1>)\n" ) )

  )
  )

  (OPCODE cvt_s_w
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ float_normal) (_DEST_ int_any))
   (ASMFORMAT ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>\n" ) )

  )
   (IRDUMPFORMAT ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>)\n" ) )

  )
  )

  (OPCODE xor
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_any) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ XOR _SOURCE_2_")
   (ASMFORMAT ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )

  )
   (IRDUMPFORMAT ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )

  )
  )

  (OPCODE and
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_any) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ AND _SOURCE_2_")
   (ASMFORMAT ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )

  )
   (IRDUMPFORMAT ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE cvt_s_d
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ double1_normal) (_DEST_ float_normal))
   (ASMFORMAT  ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>\n" ) )

  )
   (IRDUMPFORMAT  ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>)\n" ) )

  )
  )

  (OPCODE cvt_d_s
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ float_normal) (_SOURCE_2_ double1_normal))
   (ASMFORMAT ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>\n" ) )

  )
   (IRDUMPFORMAT ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>)\n" ) )

  )
  )

  (OPCODE cvt_d_w
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_DEST_ double1_normal))
   (ASMFORMAT  ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>\n" ) )

  )
   (IRDUMPFORMAT ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>)\n" ) )

  )
  )

  (OPCODE trunc_w_s
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ float_normal) (_DEST_ int_any))
   (ASMFORMAT 	   ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,$<src2>\n" ) )

  )
   (IRDUMPFORMAT 	   ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,$<src2>)\n" ) )

  )
  )

  (OPCODE trunc_w_d
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ double1_normal) (_DEST_ int_any))
   (ASMFORMAT 	   ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,$<src2>\n" ) )

  )
   (IRDUMPFORMAT 	   ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,$<src2>)\n" ) )

  )
  )

  (OPCODE mfhi 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_hilo) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_")
   (ASMFORMAT ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t<opcode>\t$<src1>,$<dst1>\n" ) )

  )
   (IRDUMPFORMAT  ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>)\n" ) )

  )
  )

  (OPCODE mflo 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_hilo) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t<opcode>\t$<src1>,$<dst1>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>)\n" ) )

  )
  )

  (OPCODE mfc1 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ float_normal) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_")
   (ASMFORMAT 	   ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$f<src1>\n" ) )

  )
   (IRDUMPFORMAT 	   ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($f<src1>)\n" ) )

  )
  )

  (OPCODE mtc1 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_DEST_ float_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_")
   (ASMFORMAT 	   ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$<src1>\n" ) )

  )
   (IRDUMPFORMAT 	   ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($<src1>)\n" ) )

  )
  )

  (OPCODE sgtu 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_ >= _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE sleu 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_<= _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE sltu 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_< _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT      ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )
  )
   (IRDUMPFORMAT       ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE li
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_immediate) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=lab" ) ( PRINT "\t<opcode>\t$<dst1>,<src1>\n" ) )
	   ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t<opcode>\t$<dst1>,<src1>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=lab" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>)\n" ) )

  )
  )

  (OPCODE div 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_any) (_DEST_ int_hilo))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ / _SOURCE_2_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE mult 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_any) (_DEST_ int_hilo))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ * _SOURCE_2_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE and 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_any) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ AND _SOURCE_2_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE or 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_any) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ OR _SOURCE_2_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE xori 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ XOR _SOURCE_2_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE andi 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ AND _SOURCE_2_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE ori 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ OR _SOURCE_2_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE li_s 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_immediate) (_DEST_ float_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>)\n" ) )

  )
  )

  (OPCODE li_d
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_immediate) (_DEST_ double1_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>)\n" ) )

  )
  )

  (OPCODE sgeu
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_ == _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT       ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE sne 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_ != _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT      ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE seq 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_ == _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT      ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT      ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE sgt 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_ >= _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT       ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE sle 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_<= _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT       ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT     ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE slt 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_< _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT       ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )
  )
   (IRDUMPFORMAT      ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE sge 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_ == _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT      ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT       ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE sla 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_2_<<_SOURCE_1_ ")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )
  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE sll 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_2_>>_SOURCE_1_ ")
   (ASMFORMAT       ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE sra 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_2_<<_SOURCE_1_ ")
   (ASMFORMAT       ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE srl 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_2_>>_SOURCE_1_ ")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE move
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>)\n" ) )

  )
  )

  (OPCODE subu
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ - _SOURCE_2_")
   (ASMFORMAT ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,$<src2>\n" ) )
 ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT ( (COND "dst1=reg,src1=reg,src2=reg") (PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n") )
( (COND "dst1=reg,src1=reg,src2=imm") (PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n") )

  )
  )

  (OPCODE nop
   (OP_TYPE DATA_OP)
  )

  (OPCODE addu
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ + _SOURCE_2_")
   (ASMFORMAT ((COND "dst1=reg,src1=reg,src2=reg") (PRINT "\t<opcode>\t$<dst1>, $<src1>, $<src2>\n"))
((COND "dst1=reg,src1=reg,src2=imm") (PRINT "\t<opcode>\t$<dst1>, $<src1>, <src2>\n"))

  )
   (IRDUMPFORMAT ((COND "dst1=reg,src1=reg,src2=reg") (PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,$<src2>)\n"))
((COND "dst1=reg,src1=reg,src2=imm") (PRINT "\t4\t<opcode>\t($<dst1>)\t($<src1>,<src2>)\n"))

  )
  )

  (OPCODE mul_d 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ double1_normal) (_SOURCE_2_ double1_normal) (_DEST_ double1_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ * _SOURCE_2_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE add_d 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ double1_normal) (_SOURCE_2_ double1_normal) (_DEST_ double1_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ + _SOURCE_2_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE sub_d 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ double1_normal) (_SOURCE_2_ double1_normal) (_DEST_ double1_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ - _SOURCE_2_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE div_d
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ double1_normal) (_SOURCE_2_ double1_normal) (_DEST_ double1_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ / _SOURCE_2_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE sub_s 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ float_normal) (_SOURCE_2_ float_normal) (_DEST_ float_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ - _SOURCE_2_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE add_s 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ float_normal) (_SOURCE_2_ float_normal) (_DEST_ float_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ + _SOURCE_2_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE mul_s 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ float_normal) (_SOURCE_2_ float_normal) (_DEST_ float_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ * _SOURCE_2_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE div_s
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ float_normal) (_SOURCE_2_ float_normal) (_DEST_ float_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_ / _SOURCE_2_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>,<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>,<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE mov_d
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ double1_normal) (_DEST_ double1_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>\n" ) )
	   ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>\n" ) )

  )
   (IRDUMPFORMAT       ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>)\n" ) )
	  ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>)\n" ) )

  )
  )

  (OPCODE mov_s 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ float_normal) (_DEST_ float_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t<opcode>\t$f<dst1>,$f<src1>\n" ) )
	   ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>\n" ) )

  )
   (IRDUMPFORMAT       ( ( COND "dst1=reg,src1=reg" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t($f<src1>)\n" ) )
	  ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>)\n" ) )

  )
  )

  (OPCODE c_le_d
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ double1_normal) (_SOURCE_2_ double_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_<= _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE c_lt_d
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ double1_normal) (_SOURCE_2_ double_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_< _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE c_ge_d
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ double1_normal) (_SOURCE_2_ double_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_ >= _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE c_gt_d 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ double1_normal) (_SOURCE_2_ double_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_ > _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE c_eq_d
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ double1_normal) (_SOURCE_2_ double_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_ == _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE c_le_s
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ float_normal) (_SOURCE_2_ float_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_<= _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE c_lt_s 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ float_normal) (_SOURCE_2_ float_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_< _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE c_ge_s 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ float_normal) (_SOURCE_2_ float_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_ >= _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE c_gt_s
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ float_normal) (_SOURCE_2_ float_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_ > _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE c_eq_s
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ float_normal) (_SOURCE_2_ float_all) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = 1 if _SOURCE_1_ == _SOURCE_2_, else _DEST_ = 0")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t<opcode>\t$f<src1>,$f<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=reg" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,$f<src2>)\n" ) )
	   ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($f<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE li_d 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_immediate) (_DEST_ double1_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>)\n" ) )

  )
  )

  (OPCODE li_s
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_immediate) (_DEST_ float_normal))
   (BEHAVIOR "_DEST_ = _SOURCE_1_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src1>)\n" ) )

  )
  )

  (OPCODE jr 
   (OP_TYPE FLOW_OP)
   (ASMFORMAT        ( ( COND "src1=reg" ) ( PRINT "\t<opcode>\t$31" ) )
	   ( ( COND "src1=nil" ) ( PRINT "\t<opcode>\t$31" ) )

  )
   (IRDUMPFORMAT        ( ( COND "src1=reg" ) ( PRINT "\t4\t<opcode>\t()\t($<src1>)\n" ) )
	   ( ( COND "src1=nil" ) ( PRINT "\t4\t<opcode>\t()\t()\n" ) )

  )
  )

  (OPCODE j 
   (OP_TYPE FLOW_OP)
   (OPERANDS (_SOURCE_1_ int_immediate))
   (BEHAVIOR "PC = PC + 4 + _SOURCE_1_")
   (ASMFORMAT        ( ( COND "src1=reg" ) ( PRINT "\t<opcode>\t$<src1>\n" ) )
	   ( ( COND "src1=lab" ) ( PRINT "\t<opcode>\t$<src1>\n" ) )
	   ( ( COND "src1=nil" ) ( PRINT "\t<opcode>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "src1=reg" ) ( PRINT "\t4\t<opcode>\t()\t($<src1>)\n" ) )
	   ( ( COND "src1=lab" ) ( PRINT "\t4\t<opcode>\t()\t(<src1>)\n" ) )

  )
  )

  (OPCODE bnez 
   (OP_TYPE FLOW_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate))
   (BEHAVIOR "if (_SOURCE_1_ == 0) then PC = PC + 4 + _SOURCE_2_")
   (ASMFORMAT        ( ( COND "src1=reg,src2=lab" ) ( PRINT "\t<opcode>\t$<src1>,<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "src1=reg,src2=lab" ) ( PRINT "\t4\t<opcode>\t()\t($<src1>,<src2>)\n" ) )

  )
  )

  (OPCODE bc1t 
   (OP_TYPE FLOW_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate))
   (BEHAVIOR "if (_SOURCE_1_ == 0) then PC = PC + 4 + _SOURCE_2_")
   (ASMFORMAT        ( ( COND "src1=reg,src2=lab" ) ( PRINT "\t<opcode>\t<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "src1=reg,src2=lab" ) ( PRINT "\t4\t<opcode>\t()\t(<src2>)\n" ) )

  )
  )

  (OPCODE jal
   (OP_TYPE FLOW_OP)
   (OPERANDS (_SOURCE_1_ int_immediate) (_SOURCE_2_ int_any))
   (BEHAVIOR "PC = PC + 4 + _SOURCE_1_")
   (ASMFORMAT        ( ( COND "src1=lab" ) ( PRINT "\t<opcode>\t$<src1>\n" ) )
	   ( ( COND "src1=sav,src*=reg" ) ( PRINT "\t<opcode>\t<src1>,<src*>\n" ) )
	   ( ( COND "src1=sav" ) ( PRINT "\t<opcode>\t<src1>,$4\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "src1=lab" ) ( PRINT "\t4\t<opcode>\t()\t$<src1>\n" ) )
	   ( ( COND "src1=sav,src*=reg" ) ( PRINT "\t4\t<opcode>\t()\t(<src1>,<src*>)\n" ) )
	   ( ( COND "src1=sav" ) ( PRINT "\t4\t<opcode>\t()\t(<src1>,$4)\n" ) )

  )
  )

  (OPCODE DEBUG_PRINT
   (OP_TYPE FLOW_OP)
  )

  (OPCODE la 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_immediate) (_DEST_ int_any))
   (BEHAVIOR "_DEST_ = _SOURCE_1_")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=lab" ) ( PRINT "\t<opcode>\t$<dst1>,<src1>\n" ) )
	   ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t<opcode>\t$<dst1>,<src1>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=lab" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>)\n" ) )
	   ( ( COND "dst1=reg,src1=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>)\n" ) )

  )
  )

  (OPCODE lw 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_REG_DEST_ int_any) (_MEM_SRC_ int_mem))
   (BEHAVIOR "_REG_DEST_= MEM[_SOURCE_1_ + _SOURCE_2_]")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,<src2>($<src1>)\n" ) )
	   ( ( COND "dst1=reg,src1=lab,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,<src1> +<src2>\n" ) )
	   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,<src1> +<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src2>,$<src1>)\n" ) )
	   ( ( COND "dst1=reg,src1=lab,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>,<src2>)\n" ) )
   ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE sw 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_REG_SRC_ int_any) (_MEM_DEST_ int_mem))
   (BEHAVIOR "MEM[_SOURCE_1_ + _SOURCE_2_] = _REG_SRC_")
   (ASMFORMAT        ( ( COND "src1=reg,src3=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<src3>,<src2>($<src1>)\n" ) )
	   ( ( COND "src1=lab,src3=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<src3>,<src1> +<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "src1=reg,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src2>,$<src1>)\n" ) )
	   ( ( COND "src1=lab,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src1>,<src2>)\n" ) )
      ( ( COND "src1=imm,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE lbu 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_REG_DEST_ int_any) (_MEM_SRC_ int_mem))
   (BEHAVIOR "_REG_DEST_= MEM[_SOURCE_1_ + _SOURCE_2_]")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,<src2>($<src1>)\n" ) )
	   ( ( COND "dst1=reg,src1=lab,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,<src1> +<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src2>,$<src1>)\n" ) )
	   ( ( COND "dst1=reg,src1=lab,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>,<src2>)\n" ) )
( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE lb 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_REG_DEST_ int_any) (_MEM_SRC_ int_mem))
   (BEHAVIOR "_REG_DEST_= MEM[_SOURCE_1_ + _SOURCE_2_]")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,<src2>($<src1>)\n" ) )
	   ( ( COND "dst1=reg,src1=lab,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,<src1> +<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src2>,$<src1>)\n" ) )
	   ( ( COND "dst1=reg,src1=lab,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>,<src2>)\n" ) )
( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE sbu 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_REG_SRC_ int_any) (_MEM_DEST_ int_mem))
   (BEHAVIOR "MEM[_SOURCE_1_ + _SOURCE_2_] = _REG_SRC_")
   (ASMFORMAT        ( ( COND "src1=reg,src3=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<src3>,<src2>($<src1>)\n" ) )
	   ( ( COND "src1=lab,src3=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<src3>,<src1> +<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "src1=reg,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src2>,$<src1>)\n" ) )
	   ( ( COND "src1=lab,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src1>,<src2>)\n" ) )
    ( ( COND "src1=imm,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE sb 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_REG_SRC_ int_any) (_MEM_DEST_ int_mem))
   (BEHAVIOR "MEM[_SOURCE_1_ + _SOURCE_2_] = _REG_SRC_")
   (ASMFORMAT        ( ( COND "src1=reg,src3=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<src3>,<src2>($<src1>)\n" ) )
	   ( ( COND "src1=lab,src3=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<src3>,<src1> +<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "src1=reg,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src2>,$<src1>)\n" ) )
	   ( ( COND "src1=lab,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src1>,<src2>)\n" ) )
      ( ( COND "src1=imm,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE lhu 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_REG_DEST_ int_any) (_MEM_SRC_ int_mem))
   (BEHAVIOR "_REG_DEST_= MEM[_SOURCE_1_ + _SOURCE_2_]")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,<src2>($<src1>)\n" ) )
	   ( ( COND "dst1=reg,src1=lab,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,<src1> +<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src2>,$<src1>)\n" ) )
	   ( ( COND "dst1=reg,src1=lab,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>,<src2>)\n" ) )
( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE lh 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_REG_DEST_ int_any) (_MEM_SRC_ int_mem))
   (BEHAVIOR "_REG_DEST_= MEM[_SOURCE_1_ + _SOURCE_2_]")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,<src2>($<src1>)\n" ) )
	   ( ( COND "dst1=reg,src1=lab,src2=imm" ) ( PRINT "\t<opcode>\t$<dst1>,<src1> +<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src2>,$<src1>)\n" ) )
	   ( ( COND "dst1=reg,src1=lab,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>,<src2>)\n" ) )
( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE shu 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_REG_SRC_ int_any) (_MEM_DEST_ int_mem))
   (BEHAVIOR "MEM[_SOURCE_1_ + _SOURCE_2_] = _REG_SRC_")
   (ASMFORMAT        ( ( COND "src1=reg,src3=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<src3>,<src2>($<src1>)\n" ) )
	   ( ( COND "src1=lab,src3=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<src3>,<src1> +<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "src1=reg,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src2>,$<src1>)\n" ) )
	   ( ( COND "src1=lab,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src1>,<src2>)\n" ) )
     ( ( COND "src1=imm,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE sh 
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_REG_SRC_ int_any) (_MEM_DEST_ int_mem))
   (BEHAVIOR "MEM[_SOURCE_1_ + _SOURCE_2_] = _REG_SRC_")
   (ASMFORMAT        ( ( COND "src1=reg,src3=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<src3>,<src2>($<src1>)\n" ) )
	   ( ( COND "src1=lab,src3=reg,src2=imm" ) ( PRINT "\t<opcode>\t$<src3>,<src1> +<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "src1=reg,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src2>,$<src1>)\n" ) )
	   ( ( COND "src1=lab,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src1>,<src2>)\n" ) )
      ( ( COND "src1=imm,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE s_s
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_REG_SRC_ float_normal) (_MEM_DEST_ int_mem))
   (BEHAVIOR "MEM[_SOURCE_1_ + _SOURCE_2_] = _REG_SRC_")
   (ASMFORMAT        ( ( COND "src1=reg,src3=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<src3>,<src2>($<src1>)\n" ) )
	   ( ( COND "src1=lab,src3=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<src3>,<src1> +<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "src1=reg,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($f<src3>,<src2>,$<src1>)\n" ) )
	   ( ( COND "src1=lab,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($f<src3>,<src1>,<src2>)\n" ) )
       ( ( COND "src1=imm,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE l_s
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_REG_DEST_ float_normal) (_MEM_SRC_ int_mem))
   (BEHAVIOR "_REG_DEST_=MEM[_SOURCE_1_ + _SOURCE_2_]")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src2>($<src1>)\n" ) )
       ( ( COND "dst1=reg,src1=lab,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1> +<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src2>,$<src1>)\n" ) )
       ( ( COND "dst1=reg,src1=lab,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src2>,<src1>)\n" ) )
( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE s_d
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_REG_SRC_ double1_normal) (_MEM_DEST_ int_mem))
   (BEHAVIOR "MEM[_SOURCE_1_ + _SOURCE_2_] = _REG_SRC_")
   (ASMFORMAT        ( ( COND "src1=reg,src3=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<src3>,<src2>($<src1>)\n" ) )
	   ( ( COND "src1=lab,src3=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<src3>,<src1> +<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "src1=reg,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($f<src3>,<src2>,$<src1>)\n" ) )
	   ( ( COND "src1=lab,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($f<src3>,<src1>,<src2>)\n" ) )
       ( ( COND "src1=imm,src3=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t()\t($<src3>,<src1>,<src2>)\n" ) )
  )
  )

  (OPCODE l_d
   (OP_TYPE DATA_OP)
   (OPERANDS (_SOURCE_1_ int_any) (_SOURCE_2_ int_immediate) (_REG_DEST_ double1_normal) (_MEM_SRC_ int_mem))
   (BEHAVIOR "_REG_DEST_=MEM[_SOURCE_1_ + _SOURCE_2_]")
   (ASMFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src2>($<src1>)\n" ) )
       ( ( COND "dst1=reg,src1=lab,src2=imm" ) ( PRINT "\t<opcode>\t$f<dst1>,<src1> +<src2>\n" ) )

  )
   (IRDUMPFORMAT        ( ( COND "dst1=reg,src1=reg,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src2>,$<src1>)\n" ) )
       ( ( COND "dst1=reg,src1=lab,src2=imm" ) ( PRINT "\t4\t<opcode>\t($f<dst1>)\t(<src2>,<src1>)\n" ) )
      ( ( COND "dst1=reg,src1=imm,src2=imm" ) ( PRINT "\t4\t<opcode>\t($<dst1>)\t(<src1>,<src2>)\n" ) )
  )
  )

 )

 (OP_GROUP ALU_Unit_ops
  (OPCODE dmfc1 dmtc1 cvt_s_w xor and cvt_s_d cvt_d_s cvt_d_w trunc_w_s trunc_w_d mfhi  mflo  mfc1  mtc1  sgtu  sleu  sltu  li div  mult  and  or  xori  andi  ori  li_s  li_d sgeu sne  seq  sgt  sle  slt  sge  sla  sll  sra  srl  move subu nop addu)
 )

 (OP_GROUP FALU_Unit_ops
  (OPCODE mul_d  add_d  sub_d  div_d sub_s  add_s  mul_s  div_s mov_d mov_s  c_le_d c_lt_d c_ge_d c_gt_d  c_eq_d c_le_s c_lt_s  c_ge_s  c_gt_s c_eq_s li_d  li_s)
 )

 (OP_GROUP BR_Unit_ops
  (OPCODE jr  j  bnez  bc1t  jal)
 )

 (OP_GROUP Debug_ops
  (OPCODE DEBUG_PRINT)
 )

 (OP_GROUP LDST_Unit_ops
  (OPCODE la  lw  sw  lbu  lb  sbu  sb  lhu  lh  shu  sh  s_s l_s s_d l_d)
 )

)



;////////////////////////////////////Section 2: Instruction template //////////////////////////////////

(INSTRUCTION_SECTION
  (WORDLEN 32)
  (SLOTS
   ((TYPE DATA) (BITWIDTH 8) (UNIT ALU1_EX))
   ((TYPE DATA) (BITWIDTH 8) (UNIT ALU2_EX))
   ((TYPE DATA) (BITWIDTH 8) (UNIT FALU_EX))
   ((TYPE DATA) (BITWIDTH 8) (UNIT LDST_EX))
   ((TYPE CONTROL) (BITWIDTH 8) (UNIT BR_EX))
  )
)



;////////////////////////////////////Section 3: Operation mappings //////////////////////////////////////

(OPMAPPING_SECTION
    (OPERAND_MAPPING
	 (OP_MAPPING (GENERIC	(DATATYPE ANY)	  (CLASSTYPE NORMAL))	 (TARGET    int_normal))

	 (OP_MAPPING (GENERIC   (DATATYPE INT)    (CLASSTYPE IMM))		 (TARGET    int_immediate))
	 (OP_MAPPING (GENERIC   (DATATYPE INT)    (CLASSTYPE NORMAL))    (TARGET    int_normal))
	 (OP_MAPPING (GENERIC   (DATATYPE INT)    (CLASSTYPE ANY))		 (TARGET    int_any))
	 (OP_MAPPING (GENERIC 	(DATATYPE INT)    (CLASSTYPE CALL_PARM)) (TARGET 	int_call_param))
	 (OP_MAPPING (GENERIC 	(DATATYPE INT)    (CLASSTYPE ZERO))      (TARGET 	int_zero))
	 (OP_MAPPING (GENERIC 	(DATATYPE INT)    (CLASSTYPE CC))        (TARGET 	int_cc))
	 (OP_MAPPING (GENERIC 	(DATATYPE INT)    (CLASSTYPE SP))        (TARGET 	int_sp))
	 (OP_MAPPING (GENERIC 	(DATATYPE INT)    (CLASSTYPE FP))        (TARGET 	int_fp))
	 (OP_MAPPING (GENERIC 	(DATATYPE INT)    (CLASSTYPE PC))        (TARGET 	int_pc))
	 (OP_MAPPING (GENERIC 	(DATATYPE INT)    (CLASSTYPE RET_VAL))   (TARGET 	int_retval))
	 (OP_MAPPING (GENERIC 	(DATATYPE INT)    (CLASSTYPE RET_ADDR))  (TARGET 	int_retaddr))
	 (OP_MAPPING (GENERIC 	(DATATYPE INT)    (CLASSTYPE HILO))      (TARGET 	int_hilo))
	 (OP_MAPPING (GENERIC   (DATATYPE INT)    (CLASSTYPE ANY))		 (TARGET    int_any))	 
	 (OP_MAPPING (GENERIC 	(DATATYPE INT)    (CLASSTYPE MEM))		 (TARGET 	int_mem))

	 (OP_MAPPING (GENERIC   (DATATYPE DOUBLE) (CLASSTYPE IMM))		 (TARGET    double_immediate))
	 (OP_MAPPING (GENERIC 	(DATATYPE DOUBLE) (CLASSTYPE DOUBLE1))   (TARGET	double1_normal))
	 (OP_MAPPING (GENERIC 	(DATATYPE DOUBLE) (CLASSTYPE DOUBLE2))   (TARGET	double2_normal))
;	 (OP_MAPPING (GENERIC 	(DATATYPE DOUBLE) (CLASSTYPE DOUBLE))    (TARGET	double_normal))
	 (OP_MAPPING (GENERIC   (DATATYPE DOUBLE) (CLASSTYPE ANY))		 (TARGET    double_any))
	 (OP_MAPPING (GENERIC 	(DATATYPE DOUBLE) (CLASSTYPE RET_VAL))   (TARGET 	double1_retval))
	 (OP_MAPPING (GENERIC 	(DATATYPE DOUBLE) (CLASSTYPE RET_VAL))   (TARGET 	double2_retval))

	 (OP_MAPPING (GENERIC   (DATATYPE FLOAT)  (CLASSTYPE IMM))		 (TARGET    float_immediate))
	 (OP_MAPPING (GENERIC 	(DATATYPE FLOAT)  (CLASSTYPE NORMAL))    (TARGET 	float_normal))
	 (OP_MAPPING (GENERIC 	(DATATYPE FLOAT)  (CLASSTYPE ANY))		 (TARGET 	float_any))
	 (OP_MAPPING (GENERIC 	(DATATYPE FLOAT)  (CLASSTYPE RET_VAL))   (TARGET 	float_retval))

	 (OP_MAPPING (GENERIC 	(DATATYPE ANY)    (CLASSTYPE CALL_PARM)) (TARGET 	any_call_param))
	 (OP_MAPPING (GENERIC 	(DATATYPE ANY)    (CLASSTYPE CC))        (TARGET 	any_cc))
	 (OP_MAPPING (GENERIC 	(DATATYPE ANY)    (CLASSTYPE SP))        (TARGET 	any_sp))
	 (OP_MAPPING (GENERIC 	(DATATYPE ANY)    (CLASSTYPE FP))        (TARGET 	any_fp))
	 (OP_MAPPING (GENERIC 	(DATATYPE ANY)    (CLASSTYPE PC))        (TARGET 	any_pc))
	 (OP_MAPPING (GENERIC 	(DATATYPE ANY)    (CLASSTYPE RET_ADDR))  (TARGET 	any_retaddr))
	 (OP_MAPPING (GENERIC 	(DATATYPE ANY)    (CLASSTYPE HILO))      (TARGET 	any_hilo))
	 
 )




(TREE_MAPPING

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IADD
;;;;;;;;;;;;;;;;;;;;;;;

;; 0
  (
     (  GENERIC 
	    (
              (IADD DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (addu DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 1
  (
     (  GENERIC 
	    (
              (IADD DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (addu DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     ISUB
;;;;;;;;;;;;;;;;;;;;;;;

;; 2
  (
     (  GENERIC 
	    (
              (ISUB DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (subu DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 3
  (
     (  GENERIC 
	    (
              (ISUB DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (subu DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IVLOAD
;;;;;;;;;;;;;;;;;;;;;;;

;; 4
  (
     (  GENERIC 
	    (
              (IVLOAD DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (lw DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 5
  (
     (  GENERIC 
	    (
              (IVLOAD DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (lw DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = REG(3))
	    )
     )
  )

;; 6
  (
     (  GENERIC 
	    (
              (IVLOAD DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (lw DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = IMM(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IVSTORE
;;;;;;;;;;;;;;;;;;;;;;;

;; 7
  (
     (  GENERIC 
	    (
              (IVSTORE SRC[1] = REG(1) SRC[2] = IMM(2) SRC[3] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sw SRC[1] = REG(1) SRC[2] = IMM(2) SRC[3] = REG(3))
	    )
     )
  )

;; 8
  (
     (  GENERIC 
	    (
              (IVSTORE SRC[1] = IMM(1) SRC[2] = IMM(2) SRC[3] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sw SRC[1] = IMM(1) SRC[2] = IMM(2) SRC[3] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     QIVLOAD
;;;;;;;;;;;;;;;;;;;;;;;

;; 9
  (
     (  GENERIC 
	    (
              (QIVLOAD DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (lb DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 10
  (
     (  GENERIC 
	    (
              (QIVLOAD DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (lb DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = REG(3))
	    )
     )
  )

;; 11
  (
     (  GENERIC 
	    (
              (QIVLOAD DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (lb DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = IMM(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     QIVSTORE
;;;;;;;;;;;;;;;;;;;;;;;

;; 12
  (
     (  GENERIC 
	    (
              (QIVSTORE SRC[1] = REG(1) SRC[2] = IMM(2) SRC[3] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sb SRC[1] = REG(1) SRC[2] = IMM(2) SRC[3] = REG(3))
	    )
     )
  )

;; 13
  (
     (  GENERIC 
	    (
              (QIVSTORE SRC[1] = IMM(1) SRC[2] = IMM(2) SRC[3] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sb SRC[1] = IMM(1) SRC[2] = IMM(2) SRC[3] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     QIVLOADU
;;;;;;;;;;;;;;;;;;;;;;;

;; 14
  (
     (  GENERIC 
	    (
              (QIVLOADU DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (lbu DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 15
  (
     (  GENERIC 
	    (
              (QIVLOADU DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (lbu DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = REG(3))
	    )
     )
  )

;; 16
  (
     (  GENERIC 
	    (
              (QIVLOADU DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (lbu DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = IMM(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     QIVSTOREU
;;;;;;;;;;;;;;;;;;;;;;;

;; 17
  (
     (  GENERIC 
	    (
              (QIVSTOREU SRC[1] = REG(1) SRC[2] = IMM(2) SRC[3] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sbu SRC[1] = REG(1) SRC[2] = IMM(2) SRC[3] = REG(3))
	    )
     )
  )

;; 18
  (
     (  GENERIC 
	    (
              (QIVSTOREU SRC[1] = IMM(1) SRC[2] = IMM(2) SRC[3] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sbu SRC[1] = IMM(1) SRC[2] = IMM(2) SRC[3] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     HIVLOAD
;;;;;;;;;;;;;;;;;;;;;;;

;; 19
  (
     (  GENERIC 
	    (
              (HIVLOAD DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (lh DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 20
  (
     (  GENERIC 
	    (
              (HIVLOAD DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (lh DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = REG(3))
	    )
     )
  )

;; 21
  (
     (  GENERIC 
	    (
              (HIVLOAD DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (lh DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = IMM(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     HIVSTORE
;;;;;;;;;;;;;;;;;;;;;;;

;; 22
  (
     (  GENERIC 
	    (
              (HIVSTORE SRC[1] = REG(1) SRC[2] = IMM(2) SRC[3] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sh SRC[1] = REG(1) SRC[2] = IMM(2) SRC[3] = REG(3))
	    )
     )
  )

;; 23
  (
     (  GENERIC 
	    (
              (HIVSTORE SRC[1] = IMM(1) SRC[2] = IMM(2) SRC[3] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sh SRC[1] = IMM(1) SRC[2] = IMM(2) SRC[3] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     HIVLOADU
;;;;;;;;;;;;;;;;;;;;;;;

;; 24
  (
     (  GENERIC 
	    (
              (HIVLOADU DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (lhu DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 25
  (
     (  GENERIC 
	    (
              (HIVLOADU DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (lhu DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = REG(3))
	    )
     )
  )

;; 26
  (
     (  GENERIC 
	    (
              (HIVLOADU DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (lhu DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = IMM(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     HIVSTOREU
;;;;;;;;;;;;;;;;;;;;;;;

;; 27
  (
     (  GENERIC 
	    (
              (HIVSTOREU SRC[1] = REG(1) SRC[2] = IMM(2) SRC[3] = REG(3))
        )
     )
     (  TARGET  
	    (
              (shu SRC[1] = REG(1) SRC[2] = IMM(2) SRC[3] = REG(3))
	    )
     )
  )

;; 28
  (
     (  GENERIC 
	    (
              (HIVSTOREU SRC[1] = IMM(1) SRC[2] = IMM(2) SRC[3] = REG(3))
        )
     )
     (  TARGET  
	    (
              (shu SRC[1] = IMM(1) SRC[2] = IMM(2) SRC[3] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     ASSIGN
;;;;;;;;;;;;;;;;;;;;;;;

;; 29
  (
     (  GENERIC 
	    (
              (IASSIGN DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (move DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )

;; 30
  (
     (  GENERIC 
	    (
              (ASSIGN DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (move DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )

;; 31
  (
     (  GENERIC 
	    (
              (MFLO DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (mflo DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )

;; 32
  (
     (  GENERIC 
	    (
              (MFHI DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (mfhi DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     ICONSTANT
;;;;;;;;;;;;;;;;;;;;;;;

;; 33
  (
     (  GENERIC 
	    (
              (ICONSTANT DST[1] = REG(1) SRC[1] = IMM(2))
        )
     )
     (  TARGET  
	    (
              (li DST[1] = REG(1) SRC[1] = IMM(2))
	    )
     )
  )


;; 34
  (
     (  GENERIC 
	    (
              (ICONSTANT DST[1] = REG(1) SRC[1] = LAB(2))
        )
     )
     (  TARGET  
	    (
              (la DST[1] = REG(1) SRC[1] = LAB(2))
	    )
     )
  )



;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IOR
;;;;;;;;;;;;;;;;;;;;;;;

;; 35
  (
     (  GENERIC 
	    (
              (IOR DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (ori DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 36
  (
     (  GENERIC 
	    (
              (IOR DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (or DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IAND
;;;;;;;;;;;;;;;;;;;;;;;

;; 37
  (
     (  GENERIC 
	    (
              (IAND DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (andi DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 38
  (
     (  GENERIC 
	    (
              (IAND DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (and DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IXOR
;;;;;;;;;;;;;;;;;;;;;;;

;; 39
  (
     (  GENERIC 
	    (
              (IXOR DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (xori DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 40
  (
     (  GENERIC 
	    (
              (IXOR DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (xor DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IMUL
;;;;;;;;;;;;;;;;;;;;;;;

;; 41
  (
     (  GENERIC 
	    (
              (IMUL DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (mult DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IDIV
;;;;;;;;;;;;;;;;;;;;;;;

;; 42
  (
     (  GENERIC 
	    (
              (IDIV DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (div DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IADD -> la2
;;;;;;;;;;;;;;;;;;;;;;;

;; 43
  (
     (  GENERIC 
	    (
              (IADD DST[1] = REG(1) SRC[1] = LAB(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (la2 DST[1] = REG(1) SRC[1] = LAB(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     ILT
;;;;;;;;;;;;;;;;;;;;;;;

;; 44
  (
     (  GENERIC 
	    (
              (ILT DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (slt DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 45
  (
     (  GENERIC 
	    (
              (ILT DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (slt DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     ILE
;;;;;;;;;;;;;;;;;;;;;;;

;; 46
  (
     (  GENERIC 
	    (
              (ILE DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (sle DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 47
  (
     (  GENERIC 
	    (
              (ILE DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sle DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IGT
;;;;;;;;;;;;;;;;;;;;;;;

;; 48
  (
     (  GENERIC 
	    (
              (IGT DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (sgt DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 49
  (
     (  GENERIC 
	    (
              (IGT DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sgt DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IGE
;;;;;;;;;;;;;;;;;;;;;;;

;; 50
  (
     (  GENERIC 
	    (
              (IGE DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (sge DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 51
  (
     (  GENERIC 
	    (
              (IGE DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sge DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     ILTU
;;;;;;;;;;;;;;;;;;;;;;;

;; 52
  (
     (  GENERIC 
	    (
              (ILTU DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (sltu DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 53
  (
     (  GENERIC 
	    (
              (ILTU DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sltu DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     ILEU
;;;;;;;;;;;;;;;;;;;;;;;

;; 54
  (
     (  GENERIC 
	    (
              (ILEU DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (sleu DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 55
  (
     (  GENERIC 
	    (
              (ILEU DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sleu DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IGTU
;;;;;;;;;;;;;;;;;;;;;;;

;; 56
  (
     (  GENERIC 
	    (
              (IGTU DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (sgtu DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 57
  (
     (  GENERIC 
	    (
              (IGTU DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sgtu DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IGEU
;;;;;;;;;;;;;;;;;;;;;;;

;; 58
  (
     (  GENERIC 
	    (
              (IGEU DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (sgeu DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 59
  (
     (  GENERIC 
	    (
              (IGEU DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sgeu DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IEQ
;;;;;;;;;;;;;;;;;;;;;;;

;; 60
  (
     (  GENERIC 
	    (
              (IEQ DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (seq DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 61
  (
     (  GENERIC 
	    (
              (IEQ DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (seq DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     INE
;;;;;;;;;;;;;;;;;;;;;;;

;; 62
  (
     (  GENERIC 
	    (
              (INE DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (sne DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 63
  (
     (  GENERIC 
	    (
              (INE DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sne DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IGOTO
;;;;;;;;;;;;;;;;;;;;;;;

;; 64
  (
     (  GENERIC 
	    (
              (IGOTO SRC[1] = LAB(1))
        )
     )
     (  TARGET  
	    (
              (j SRC[1] = LAB(1))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IF
;;;;;;;;;;;;;;;;;;;;;;;

;; 65
  (
     (  GENERIC 
	    (
              (IF SRC[1] = REG(1) SRC[2] = LAB(2))
        )
     )
     (  TARGET  
	    (
              (bnez SRC[1] = REG(1) SRC[2] = LAB(2))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     RETURN
;;;;;;;;;;;;;;;;;;;;;;;

;; 66
  (
     (  GENERIC 
	    (
              (RETURN)
        )
     )
     (  TARGET  
	    (
              (jr)
	    )
     )
  )

;; 67
  (
     (  GENERIC 
	    (
              (RETURN SRC[1] = REG(1))
        )
     )
     (  TARGET  
	    (
              (jr SRC[1] = REG(1))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     ILASH, ILLSH
;;;;;;;;;;;;;;;;;;;;;;;

;; 67
  (
     (  GENERIC 
	    (
              (ILASH DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
			  (sla DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 68
  (
     (  GENERIC 
	    (
              (ILLSH DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
			  (sll DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IRASH, IRLSH
;;;;;;;;;;;;;;;;;;;;;;;

;; 69
  (
     (  GENERIC 
	    (
              (IRASH DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
			  (sra DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 70
  (
     (  GENERIC 
	    (
              (IRLSH DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
			  (srl DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )


;; Floating point operations start here
; single precision operations
;;;;;;;;;;;;;;;;;;;;;;;
;;;;     FADD
;;;;;;;;;;;;;;;;;;;;;;;

;; 71
  (
     (  GENERIC 
	    (
              (FADD DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (add_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 72
  (
     (  GENERIC 
	    (
              (FADD DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (add_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )


;;;;;;;;;;;;;;;;;;;;;;;
;;;;     FSUB
;;;;;;;;;;;;;;;;;;;;;;;

;; 73
  (
     (  GENERIC 
	    (
              (FSUB DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (sub_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 74
  (
     (  GENERIC 
	    (
              (FSUB DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sub_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     FMUL
;;;;;;;;;;;;;;;;;;;;;;;

;; 75
  (
     (  GENERIC 
	    (
              (FMUL DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (mul_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 76
  (
     (  GENERIC 
	    (
              (FMUL DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (mul_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )


;;;;;;;;;;;;;;;;;;;;;;;
;;;;     FDIV
;;;;;;;;;;;;;;;;;;;;;;;

;; 77
  (
     (  GENERIC 
	    (
              (FDIV DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (div_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 78
  (
     (  GENERIC 
	    (
              (FDIV DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (div_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     FCONSTANT
;;;;;;;;;;;;;;;;;;;;;;;

;; 79
  (
     (  GENERIC 
	    (
              (FCONSTANT DST[1] = REG(1) SRC[1] = IMM(2))
        )
     )
     (  TARGET  
	    (
              (li_s DST[1] = REG(1) SRC[1] = IMM(2))
	    )
     )
  )


;; 80
  (
     (  GENERIC 
	    (
              (FCONSTANT DST[1] = REG(1) SRC[1] = LAB(2))
        )
     )
     (  TARGET  
	    (
              (la DST[1] = REG(1) SRC[1] = LAB(2))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     FASSIGN
;;;;;;;;;;;;;;;;;;;;;;;

;; 81
  (
     (  GENERIC 
	    (
              (FASSIGN DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (mov_s DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )

; coprocessor special instructions
;;;;;;;;;;;;;;;;;;;;;;;
;;;;     CVTSI
;;;;;;;;;;;;;;;;;;;;;;;

;; 82
  (
     (  GENERIC 
	    (
              (CVTSI DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (cvt_s_w DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )

; a temporary register required for the following operation
;;;;;;;;;;;;;;;;;;;;;;;
;;;;     TRUNCIS
;;;;;;;;;;;;;;;;;;;;;;;

;; 83
  (
     (  GENERIC 
	    (
              (TRUNCIS DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (trunc_w_s DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     FNEG
;;;;;;;;;;;;;;;;;;;;;;;

;; 81
  (
     (  GENERIC 
	    (
              (FNEG DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (neg_s DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     FLT
;;;;;;;;;;;;;;;;;;;;;;;

;; 82
  (
     (  GENERIC 
	    (
              (FLT DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (c_lt_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 83
  (
     (  GENERIC 
	    (
              (FLT DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (c_lt_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )


;;;;;;;;;;;;;;;;;;;;;;;
;;;;     FLE
;;;;;;;;;;;;;;;;;;;;;;;

;; 84
  (
     (  GENERIC 
	    (
              (FLE DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (c_le_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 85
  (
     (  GENERIC 
	    (
              (FLE DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (c_le_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     FGT
;;;;;;;;;;;;;;;;;;;;;;;

;; 86
  (
     (  GENERIC 
	    (
              (FGT DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (c_gt_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 87
  (
     (  GENERIC 
	    (
              (FGT DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (c_gt_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )


;;;;;;;;;;;;;;;;;;;;;;;
;;;;     FGE
;;;;;;;;;;;;;;;;;;;;;;;

;; 88
  (
     (  GENERIC 
	    (
              (FGE DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (c_ge_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 89
  (
     (  GENERIC 
	    (
              (FGE DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (c_ge_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     FEQ
;;;;;;;;;;;;;;;;;;;;;;;

;; 90
  (
     (  GENERIC 
	    (
              (FEQ DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (c_eq_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 91
  (
     (  GENERIC 
	    (
              (FEQ DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (c_eq_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     FVLOAD
;;;;;;;;;;;;;;;;;;;;;;;

;; 92
  (
     (  GENERIC 
	    (
              (FVLOAD DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
;;              (lw DST[1] = REG(4) SRC[1] = REG(2) SRC[2] = IMM(3))
;;			  (mtc1 DST[1] = REG(1) SRC[1] = REG(4))
              (l_s DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 93
  (
     (  GENERIC 
	    (
              (FVLOAD DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (l_s DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = REG(3))
	    )
     )
  )

;; 94
  (
     (  GENERIC 
	    (
              (FVLOAD DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (l_s DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = IMM(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     FVSTORE
;;;;;;;;;;;;;;;;;;;;;;;

;; 95
  (
     (  GENERIC 
	    (
              (FVSTORE SRC[1] = REG(1) SRC[2] = IMM(2) SRC[3] = REG(3))
        )
     )
     (  TARGET  
	    (
;;              (mfc1 DST[1] = REG(4) SRC[1] = REG(3))
;;              (sw SRC[1] = REG(1) SRC[2] = IMM(2) SRC[3] = REG(4))
              (s_s SRC[1] = REG(1) SRC[2] = IMM(2) SRC[3] = REG(3))
	    )
     )
  )

;; 96
  (
     (  GENERIC 
	    (
              (FVSTORE SRC[1] = IMM(1) SRC[2] = IMM(2) SRC[3] = REG(3))
        )
     )
     (  TARGET  
	    (
              (s_s SRC[1] = IMM(1) SRC[2] = IMM(2) SRC[3] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     MTC1
;;;;;;;;;;;;;;;;;;;;;;;

;; 97
  (
     (  GENERIC 
	    (
              (MTC1 DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (mtc1 DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )


;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DMTC1
;;;;;;;;;;;;;;;;;;;;;;;

;; 97.1
  (
     (  GENERIC 
	    (
              (DMTC1 DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (dmtc1 DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     MFC1
;;;;;;;;;;;;;;;;;;;;;;;

;; 98
  (
     (  GENERIC 
	    (
              (MFC1 DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (mfc1 DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )


;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DMFC1
;;;;;;;;;;;;;;;;;;;;;;;

;; 98.1
  (
     (  GENERIC 
	    (
              (DMFC1 DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (dmfc1 DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )


; double precision operations
;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DADD
;;;;;;;;;;;;;;;;;;;;;;;

;; 99
  (
     (  GENERIC 
	    (
              (DADD DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (add_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 100
  (
     (  GENERIC 
	    (
              (DADD DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (add_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )


;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DSUB
;;;;;;;;;;;;;;;;;;;;;;;

;; 101
  (
     (  GENERIC 
	    (
              (DSUB DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (sub_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 102
  (
     (  GENERIC 
	    (
              (DSUB DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (sub_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DMUL
;;;;;;;;;;;;;;;;;;;;;;;

;; 103
  (
     (  GENERIC 
	    (
              (DMUL DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (mul_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 104
  (
     (  GENERIC 
	    (
              (DMUL DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (mul_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )


;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DDIV
;;;;;;;;;;;;;;;;;;;;;;;

;; 105
  (
     (  GENERIC 
	    (
              (DDIV DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (div_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 106
  (
     (  GENERIC 
	    (
              (DDIV DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (div_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DCONSTANT
;;;;;;;;;;;;;;;;;;;;;;;

;; 107
  (
     (  GENERIC 
	    (
              (DCONSTANT DST[1] = REG(1) SRC[1] = IMM(2))
        )
     )
     (  TARGET  
	    (
              (li_d DST[1] = REG(1) SRC[1] = IMM(2))
	    )
     )
  )


;; 108
  (
     (  GENERIC 
	    (
              (DCONSTANT DST[1] = REG(1) SRC[1] = LAB(2))
        )
     )
     (  TARGET  
	    (
              (la DST[1] = REG(1) SRC[1] = LAB(2))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DASSIGN
;;;;;;;;;;;;;;;;;;;;;;;

;; 109
  (
     (  GENERIC 
	    (
              (DASSIGN DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (mov_d DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )

; coprocessor special instructions
;;;;;;;;;;;;;;;;;;;;;;;
;;;;     CVTDI
;;;;;;;;;;;;;;;;;;;;;;;

;; 110
  (
     (  GENERIC 
	    (
              (CVTDI DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (cvt_d_w DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )

; a temporary register required for the following operation
;;;;;;;;;;;;;;;;;;;;;;;
;;;;     TRUNCID
;;;;;;;;;;;;;;;;;;;;;;;

;; 111
  (
     (  GENERIC 
	    (
              (TRUNCID DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (trunc_w_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DNEG
;;;;;;;;;;;;;;;;;;;;;;;

;; 112
  (
     (  GENERIC 
	    (
              (DNEG DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (neg_d DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DLT
;;;;;;;;;;;;;;;;;;;;;;;

;; 113
  (
     (  GENERIC 
	    (
              (DLT DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (c_lt_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 114
  (
     (  GENERIC 
	    (
              (DLT DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (c_lt_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )


;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DLE
;;;;;;;;;;;;;;;;;;;;;;;

;; 115
  (
     (  GENERIC 
	    (
              (DLE DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (c_le_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 116
  (
     (  GENERIC 
	    (
              (DLE DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (c_le_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DGT
;;;;;;;;;;;;;;;;;;;;;;;

;; 117
  (
     (  GENERIC 
	    (
              (DGT DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (c_gt_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 118
  (
     (  GENERIC 
	    (
              (DGT DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (c_gt_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )


;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DGE
;;;;;;;;;;;;;;;;;;;;;;;

;; 119
  (
     (  GENERIC 
	    (
              (DGE DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (c_ge_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 120
  (
     (  GENERIC 
	    (
              (DGE DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (c_ge_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DEQ
;;;;;;;;;;;;;;;;;;;;;;;

;; 121
  (
     (  GENERIC 
	    (
              (DEQ DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (c_eq_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 122
  (
     (  GENERIC 
	    (
              (DEQ DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (c_eq_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DVLOAD
;;;;;;;;;;;;;;;;;;;;;;;

;; 123
  (
     (  GENERIC 
	    (
              (DVLOAD DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (l_d DST[1] = REG(1) SRC[1] = REG(2) SRC[2] = IMM(3))
	    )
     )
  )

;; 124
  (
     (  GENERIC 
	    (
              (DVLOAD DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = REG(3))
        )
     )
     (  TARGET  
	    (
              (l_d DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = REG(3))
	    )
     )
  )

;; 125
  (
     (  GENERIC 
	    (
              (DVLOAD DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = IMM(3))
        )
     )
     (  TARGET  
	    (
              (l_d DST[1] = REG(1) SRC[1] = IMM(2) SRC[2] = IMM(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     DVSTORE
;;;;;;;;;;;;;;;;;;;;;;;

;; 126
  (
     (  GENERIC 
	    (
              (DVSTORE SRC[1] = REG(1) SRC[2] = IMM(2) SRC[3] = REG(3))
        )
     )
     (  TARGET  
	    (
              (s_d SRC[1] = REG(1) SRC[2] = IMM(2) SRC[3] = REG(3))
	    )
     )
  )

;; 127
  (
     (  GENERIC 
	    (
              (DVSTORE SRC[1] = IMM(1) SRC[2] = IMM(2) SRC[3] = REG(3))
        )
     )
     (  TARGET  
	    (
              (s_d SRC[1] = IMM(1) SRC[2] = IMM(2) SRC[3] = REG(3))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     CVTSD
;;;;;;;;;;;;;;;;;;;;;;;

;; 128

  (
     (  GENERIC 
	    (
              (CVTSD DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (cvt_s_d DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )


;;;;;;;;;;;;;;;;;;;;;;;
;;;;     CVTDS
;;;;;;;;;;;;;;;;;;;;;;;

;; 129

  (
     (  GENERIC 
	    (
              (CVTDS DST[1] = REG(1) SRC[1] = REG(2))
        )
     )
     (  TARGET  
	    (
              (cvt_d_s DST[1] = REG(1) SRC[1] = REG(2))
	    )
     )
  )


;;;;;;;;;;;;;;;;;;;;;;;
;;;;     IFFT
;;;;;;;;;;;;;;;;;;;;;;;

;; 131
;;
;; By SAH on 12/19/01
;; Note: I am not sure if bc1t is the equivalent of IFFT
;; However, this is what it was previously (in IBurg).
;;
  (
     (  GENERIC 
	    (
              (IFFT SRC[1] = REG(1) SRC[2] = LAB(2))
        )
     )
     (  TARGET  
	    (
              (bc1t SRC[1] = REG(1) SRC[2] = LAB(2))
	    )
     )
  )
;; finished floating point operations

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     GOTO
;;;;;;;;;;;;;;;;;;;;;;;

;; 132
  (
     (  GENERIC 
	    (
              (GOTO SRC[1] = LAB(1))
        )
     )
     (  TARGET  
	    (
              (j SRC[1] = LAB(1))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     CALL
;;;;;;;;;;;;;;;;;;;;;;;

;; 133
  (
     (  GENERIC 
	    (
              (CALL SRC[1] = LAB(1))
        )
     )
     (  TARGET  
	    (
              (jal SRC[1] = LAB(1))
	    )
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;
;;;;     NOP
;;;;;;;;;;;;;;;;;;;;;;;

;; 134
  (
     (  GENERIC 
	    (
              (NOP SRC[1] = LAB(1))
        )
     )
     (  TARGET  
	    (
              (nop SRC[1] = LAB(1))
	    )
     )
  )

 END_TREE_MAPPING))



;///////////////////////////// Section 4: Components Specification //////////////////////////////

(ARCHITECTURE_SECTION
 (SUBTYPE UNIT FetchUnit DecodeUnit OpReadUnit ExecuteUnit BranchUnit LoadStoreUnit WriteBackUnit ArchUnit ControlUnit )
 (SUBTYPE PORT UnitPort Port)
 (SUBTYPE CONNECTION MemoryConnection  RegisterConnection  RegisterConnection)
 (SUBTYPE STORAGE Storage InstStrLatch PCLatch InstructionLatch OperationLatch)

 (FetchUnit FETCH
  (CAPACITY 1)
  (INSTR_IN 4)
  (INSTR_OUT 4)
  (TIMING (all 1))
  (OPCODES all)
 
  (LATCHES (OUT FetDecLatch) (OTHER pcLatch))
 )

  (InstStrLatch FetDecLatch
  )

  (PCLatch pcLatch
  )


 (DecodeUnit DECODE
  (CAPACITY 12)
  (INSTR_IN 4)
  (INSTR_OUT 1)
  (TIMING (all 1))
  (OPCODES all)
  (LATCHES (OUT DecAlu1ReadLatch) (OUT DecAlu2ReadLatch) (OUT DecFaluReadLatch) (OUT DecLdStReadLatch) (OUT DecBrReadLatch))
  (LATCHES (IN FetDecLatch))
 )

  (InstructionLatch DecAlu1ReadLatch
  )

  (InstructionLatch DecAlu2ReadLatch
  )

  (InstructionLatch DecFaluReadLatch
  )

  (InstructionLatch DecLdStReadLatch
  )

  (InstructionLatch DecBrReadLatch
  )


 (OpReadUnit ALU1_READ
  (CAPACITY 1)
  (INSTR_IN 1)
  (INSTR_OUT 1)
  (TIMING (all 1))
  (OPCODES ALU_Unit_ops)
 
  (LATCHES (OUT Alu1ReadExLatch))
  (LATCHES (IN DecAlu1ReadLatch))
  (PORTS Alu1ReadPort1 Alu1ReadPort2)
 )

  (OperationLatch Alu1ReadExLatch
  )

  (UnitPort Alu1ReadPort1("_READ_")
  (ARGUMENT _SOURCE_1_)
(CAPACITY 1)  )

  (UnitPort Alu1ReadPort2("_READ_")
  (ARGUMENT _SOURCE_2_)
(CAPACITY 1)  )


 (OpReadUnit ALU2_READ
  (CAPACITY 1)
  (INSTR_IN 1)
  (INSTR_OUT 1)
  (TIMING (all 1))
  (OPCODES ALU_Unit_ops)
  (LATCHES (OUT Alu2ReadExLatch))
  (LATCHES (IN DecAlu2ReadLatch))
  (PORTS Alu2ReadPort1 Alu2ReadPort2)
 )

  (OperationLatch Alu2ReadExLatch
  )

  (UnitPort Alu2ReadPort1("_READ_")
    (ARGUMENT _SOURCE_1_)
  (CAPACITY 1)  )

  (UnitPort Alu2ReadPort2("_READ_")
    (ARGUMENT _SOURCE_2_)
  (CAPACITY 1)  )


 (OpReadUnit FALU_READ
  (CAPACITY 1)
  (INSTR_IN 1)
  (INSTR_OUT 1)
  (TIMING (all 1))
  (OPCODES FALU_Unit_ops)
  (LATCHES (OUT FaluReadExLatch))
  (LATCHES (IN DecFaluReadLatch))
  (PORTS FaluReadPort1 FaluReadPort2)
 )

  (OperationLatch FaluReadExLatch
  )

  (UnitPort FaluReadPort1("_READ_")
    (ARGUMENT _SOURCE_1_)
  (CAPACITY 1)  )

  (UnitPort FaluReadPort2("_READ_")
    (ARGUMENT _SOURCE_2_)
  (CAPACITY 1)  )


 (OpReadUnit BR_READ
  (CAPACITY 1)
  (INSTR_IN 1)
  (INSTR_OUT 1)
  (TIMING (all 1))
  (OPCODES BR_Unit_ops)
  (LATCHES (OUT BrReadBrExLatch))
  (LATCHES (IN DecBrReadLatch))
  (PORTS BrReadPort1 BrReadPort2)
 )

  (OperationLatch BrReadBrExLatch
  )

  (UnitPort BrReadPort1("_READ_")
    (ARGUMENT _SOURCE_1_)
  (CAPACITY 1)  )

  (UnitPort BrReadPort2("_READ_")
    (ARGUMENT _SOURCE_2_)
  (CAPACITY 1)  )


 (OpReadUnit LDST_READ
  (CAPACITY 1)
  (INSTR_IN 1)
  (INSTR_OUT 1)
  (TIMING (all 1))
  (OPCODES LDST_Unit_ops)
  (LATCHES (OUT LdStReadExLatch))
  (LATCHES (IN DecLdStReadLatch))
  (PORTS LdStReadPort2  LdStReadPort3 LdStReadPort1 )
 )

  (OperationLatch LdStReadExLatch
  )

  (UnitPort LdStReadPort2 ("_READ_")
    (ARGUMENT _SOURCE_2_)
  (CAPACITY 1)  )

  (UnitPort LdStReadPort3("_READ_")
    (ARGUMENT _REG_SRC_)
  (CAPACITY 1)  )

  (UnitPort LdStReadPort1 ("_READ_")
    (ARGUMENT _SOURCE_1_)
  (CAPACITY 1)  )


 (ExecuteUnit ALU1_EX
  (CAPACITY 1)
  (INSTR_IN 1)
  (INSTR_OUT 1)
  (TIMING (all 1))
  (OPCODES ALU_Unit_ops)
 (ARGUMENT _UNIT_)  (LATCHES (OUT Alu1ExWbLatch))
  (LATCHES (IN Alu1ReadExLatch))
 )

  (OperationLatch Alu1ExWbLatch
  )


 (ExecuteUnit ALU2_EX
  (CAPACITY 1)
  (INSTR_IN 1)
  (INSTR_OUT 1)
  (TIMING (all 1))
  (OPCODES ALU_Unit_ops)
   (ARGUMENT _UNIT_)  (LATCHES (OUT Alu2ExWbLatch))
  (LATCHES (IN Alu2ReadExLatch))
 )

  (OperationLatch Alu2ExWbLatch
  )


 (ExecuteUnit FALU_EX
  (CAPACITY 1)
  (INSTR_IN 1)
  (INSTR_OUT 1)
  (TIMING (all 1))
  (OPCODES FALU_Unit_ops)
   (ARGUMENT _UNIT_)
  (LATCHES (OUT FaluExWbLatch))
  (LATCHES (IN FaluReadExLatch))
 )

  (OperationLatch FaluExWbLatch
  )


 (BranchUnit BR_EX
  (CAPACITY 1)
  (INSTR_IN 1)
  (INSTR_OUT 1)
  (TIMING (all 1))
  (OPCODES BR_Unit_ops Debug_ops)
   (ARGUMENT _UNIT_)
  (LATCHES (OUT BrExWbLatch) (OTHER pcLatch1))
  (LATCHES (IN BrReadBrExLatch))
 )

  (OperationLatch BrExWbLatch
  )

  (PCLatch pcLatch1
  )


 (LoadStoreUnit LDST_EX
  (CAPACITY 1)
  (INSTR_IN 1)
  (INSTR_OUT 1)
  (TIMING (all 1))
  (OPCODES LDST_Unit_ops)
   (ARGUMENT _UNIT_)  (LATCHES (OUT LdStExWbLatch))
  (LATCHES (IN LdStReadExLatch))
  (PORTS LdStReadWritePort)
 )

  (OperationLatch LdStExWbLatch
  )

  (UnitPort LdStReadWritePort("_READWRITE_")
    (ARGUMENT _MEM_SRC_)
  (ARGUMENT _MEM_DEST_)
  (CAPACITY 1)  )

   (MemoryConnection  LdStMemCxn
   )


 (WriteBackUnit WB
  (CAPACITY 5)
  (INSTR_IN 1)
  (INSTR_OUT 1)
  (TIMING (all 1))
  (OPCODES all)
  (LATCHES (IN Alu1ExWbLatch) (IN Alu2ExWbLatch) (IN FaluExWbLatch) (IN BrExWbLatch) (IN LdStExWbLatch))
  (PORTS WbWritePort)
 )

  (UnitPort WbWritePort("_WRITE_")
    (ARGUMENT _DEST_)
  (ARGUMENT _REG_DEST_)
  (CAPACITY 5)  )


 (Storage GPRFile
  (PORTS GprReadPort1  GprReadPort2 GprReadPort4 GprReadPort5 GprReadPort6 GprReadPort7 GprReadPort8 GprReadPort9 GprWritePort GprReadPort3)
 (CAPACITY 32) )

  (Port GprReadPort1 ("_READ_")
    (CAPACITY 1)  )

   (RegisterConnection  GprReadPort1Alu1ReadPort1Cxn
   )

  (Port GprReadPort2("_READ_")
    (CAPACITY 1)  )

   (RegisterConnection  GprReadPort2Alu1ReadPort2Cxn
   )

  (Port GprReadPort4("_READ_")
    (CAPACITY 1)  )

   (RegisterConnection  GprReadPort4Alu2ReadPort2Cxn
   )

  (Port GprReadPort5("_READ_")
    (CAPACITY 1)  )

   (RegisterConnection  GprReadPort5BrReadPort1Cxn
   )

  (Port GprReadPort6("_READ_")
    (CAPACITY 1)  )

   (RegisterConnection  GprReadPort6BrReadPort2Cxn
   )

  (Port GprReadPort7("_READ_")
    (CAPACITY 1)  )

   (RegisterConnection  GprReadPort7LdStReadPort1Cxn
   )

  (Port GprReadPort8("_READ_")
    (CAPACITY 1)  )

   (RegisterConnection  GprReadPort8LdStReadPort2Cxn
   )

  (Port GprReadPort9("_READ_")
    (CAPACITY 1)  )

   (RegisterConnection  GprReadPort9LdStReadPort3Cxn
   )

  (Port GprWritePort("_WRITE_")
    (CAPACITY 3)  )

   (RegisterConnection  WbWritePortGprWritePortCxn
   )

  (Port GprReadPort3("_READ_")
    (CAPACITY 1)  )

   (RegisterConnection  GprReadPort3Alu2ReadPort1Cxn
   )


 (Storage FPRFile
  (PORTS FprReadPort1  FprReadPort2 FprReadPort3 FprReadPort4 FprReadPort5 FprWritePort FprReadPort6 FprReadPort7)
   (CAPACITY 32)
 )

  (Port FprReadPort1 ("_READ_")
    (CAPACITY 1)  )

   (RegisterConnection  FprReadPort1Alu2ReadPort1Cxn
   )

  (Port FprReadPort2("_READ_")
    (CAPACITY 1)  )

   (RegisterConnection  FprReadPort2Alu2ReadPort2Cxn
   )

  (Port FprReadPort3("_READ_")
    (CAPACITY 1)  )

   (RegisterConnection  FprReadPort3FaluReadPort1Cxn
   )

  (Port FprReadPort4("_READ_")
    (CAPACITY 1)  )

   (RegisterConnection  FprReadPort4FaluReadPort2Cxn
   )

  (Port FprReadPort5("_READ_")
    (CAPACITY 1)  )

   (RegisterConnection  FprReadPort5LdStReadPort3Cxn
   )

  (Port FprWritePort("_WRITE_")
    (CAPACITY 2)  )

   (RegisterConnection  WbWritePortFprWritePortCxn
   )

  (Port FprReadPort6("_READ_")
    (CAPACITY 1)  )

   (RegisterConnection FprReadPort6ALU1ReadPort1
   )

  (Port FprReadPort7("_READ_")
  (CAPACITY 1)  )

   (RegisterConnection FprReadPort7ALU1ReadPort2Cxn
   )


 (Storage L1
  (PORTS L1ReadWritePort)
   (CAPACITY 1) )

  (Port L1ReadWritePort("_READWRITE_")
    (CAPACITY 1)  )


 (Storage MiscRegFile
 )


 (Storage IL1
 )


 (Storage L2
 )


 (Storage ScratchPad
 )


 (Storage MainMem
 )


 (Storage Connect
 )

)

;////////////////////////////////////// Section 5: Pipeline and Data-transfer paths /////////////////////////

(PIPELINE_SECTION
 (PIPELINE FETCH DECODE READ_EXECUTE WB)
 (READ_EXECUTE (ALTERNATE read_execute0 read_execute1 read_execute2 read_execute3 read_execute4))
   (read_execute0( PIPELINE ALU1_READ ALU1_EX ))
   (read_execute1( PIPELINE ALU2_READ ALU2_EX ))
   (read_execute2( PIPELINE FALU_READ FALU_EX ))
   (read_execute3( PIPELINE BR_READ BR_EX ))
   (read_execute4( PIPELINE LDST_READ LDST_EX ))



 (DTPATHS

  (TYPE UNI
   ( FPRFile ALU1_READ FprReadPort6 FprReadPort6ALU1ReadPort1 Alu1ReadPort1)
   ( FPRFile ALU1_READ FprReadPort7 FprReadPort7ALU1ReadPort2Cxn Alu1ReadPort2)
   ( FPRFile ALU2_READ FprReadPort1  FprReadPort1Alu2ReadPort1Cxn Alu2ReadPort1)
   ( FPRFile ALU2_READ FprReadPort2 FprReadPort2Alu2ReadPort2Cxn Alu2ReadPort2)
   ( FPRFile FALU_READ FprReadPort3 FprReadPort3FaluReadPort1Cxn FaluReadPort1)
   ( FPRFile FALU_READ FprReadPort4 FprReadPort4FaluReadPort2Cxn FaluReadPort2)
   ( FPRFile LDST_READ FprReadPort5 FprReadPort5LdStReadPort3Cxn LdStReadPort3)
   ( GPRFile ALU1_READ GprReadPort1  GprReadPort1Alu1ReadPort1Cxn Alu1ReadPort1)
   ( GPRFile ALU1_READ GprReadPort2 GprReadPort2Alu1ReadPort2Cxn Alu1ReadPort2)
   ( GPRFile ALU2_READ GprReadPort3 GprReadPort3Alu2ReadPort1Cxn Alu2ReadPort1)
   ( GPRFile ALU2_READ GprReadPort4 GprReadPort4Alu2ReadPort2Cxn Alu2ReadPort2)
   ( GPRFile BR_READ GprReadPort5 GprReadPort5BrReadPort1Cxn BrReadPort1)
   ( GPRFile BR_READ GprReadPort6 GprReadPort6BrReadPort2Cxn BrReadPort2)
   ( GPRFile LDST_READ GprReadPort7 GprReadPort7LdStReadPort1Cxn LdStReadPort1 )
   ( GPRFile LDST_READ GprReadPort8 GprReadPort8LdStReadPort2Cxn LdStReadPort2 )
   ( GPRFile LDST_READ GprReadPort9 GprReadPort9LdStReadPort3Cxn LdStReadPort3)
   ( LDST_EX L1 LdStReadWritePort LdStMemCxn L1ReadWritePort)
   ( WB FPRFile WbWritePort WbWritePortFprWritePortCxn FprWritePort)
   ( WB GPRFile WbWritePort WbWritePortGprWritePortCxn GprWritePort)

  )

 )
)


;/////////////////////////////////// Section 6: Memory hierarchy //////////////////////////////////////

(STORAGE_SECTION
 (GPRFile
  (TYPE VirtualRegFile)
  (WIDTH 32)
  (SIZE 32)
  (MNEMONIC "R")
 )

 (FPRFile
  (TYPE VirtualRegFile)
  (WIDTH 64)
  (SIZE 32)
  (MNEMONIC "f")
 )

 (L1
  (TYPE DCACHE)
  (WORDSIZE 4)
  (LINESIZE 2)
  (ASSOCIATIVITY 4)
  (NUM_LINES 8)
  (ACCESS_TIMES 1)
  (ADDRESS_RANGE (0 9995904))
 )

 (MiscRegFile
  (TYPE VirtualRegFile)
  (WIDTH 32)
  (SIZE 64)
  (MNEMONIC "SR")
 )

 (IL1
  (TYPE ICACHE)
  (WORDSIZE 4)
  (LINESIZE 2)
  (ASSOCIATIVITY 4)
  (NUM_LINES 8)
  (ACCESS_TIMES 1)
  (ADDRESS_RANGE (0 99999))
 )

 (L2
  (TYPE DCACHE)
  (WORDSIZE 4)
  (LINESIZE 2)
  (ASSOCIATIVITY 8)
  (NUM_LINES 64)
  (ACCESS_TIMES 5)
  (ADDRESS_RANGE (0 9995904))
 )

 (ScratchPad
  (TYPE SRAM)
  (ACCESS_TIMES 1)
  (ADDRESS_RANGE (9995905 9999999))
 )

 (MainMem
  (TYPE DRAM)
  (ACCESS_TIMES 50)
  (ADDRESS_RANGE (0 9995904))
 )

(Connect
 (TYPE CONNECTIVITY)
 (STORAGE_CONNECTIONS ( IL1 L2 )( L1 L2 )( L2 MainMem ) )
 )
)